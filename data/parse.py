from binarydecoder import BinaryRecord, BinaryField, BinaryFieldType
import sys

import numpy

#           log_with_parity(currentTime);               // 1
#           log_with_parity(iterations++);              // 2
#           log_with_parity(altitudeHoldState);         // 3
#           log_with_parity(getBaroAltitude());         // 4
#           log_with_parity(baroAltitudeToHoldTarget);  // 5
#           log_with_parity(receiverCommand[THROTTLE]); // 6
#           log_with_parity(throttle);                  // 7
#           log_with_parity(altitudeHoldThrottle);      // 8
#           //log_with_parity(altitudeHoldThrottleCorrection);
#           log_with_parity(PID[BARO_ALTITUDE_HOLD_PID_IDX].integratedError);
#           for (byte motor = 0; motor < LASTMOTOR; motor++)
#             log_with_parity(motorCommand[motor]);
#           log_with_parity((float)batteryData[0].voltage/100.0);

binary_fields = [
    BinaryField("currentTime",       "ulong", 1),
    BinaryField("iterations",        "uint",  1),
    BinaryField("accel",             "int",   3),
    BinaryField("gyro",              "int",   3),
    BinaryField("mag",               "int",   3),
    BinaryField("altitude",          "float", 1),
    BinaryField("battery",           "uint",  1),
#     BinaryField("motor",             "uint",  4),
#     BinaryField("receiver",          "uint",  4),
    BinaryField("q",                 "float", 4),
    BinaryField("checksum",          "uint",  1)
    ]

#by = b'TX_sensors\r\n\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x04\x02\xe4<\x00\x00\x01\x00%\x01S\xffO\x11\x00\x00\x00\x00\x00\x00\x93\xff>\xff\xa4\x00\x00\x9b\x8eGT\x02\xa8\xbc\x01\x00\x02\x00\x16\x01N\xff<\x11%\x00\xe0\xffU\x00\x8c\xff?\xff\x9e\x00\x803\xc0G\xea\x02PC\x03\x00\x03\x00\x18\x01>\xffD\x11"\x00\xdb\xff\x1f\x00\x91\xff=\xff\xa2\x00\x004\xc0G:\x02\xf8\xc9\x04\x00\x04\x00 \x01Q\xffQ\x11"\x00\xdb\xff\x1f\x00\x90\xff<\xff\xa1\x00\x004\xc0GY\x02\xa0L\x06\x00\x05\x00*\x01O\xffD\x11"\x00\xdb\xff \x00\x90\xff>\xff\xa2\x00\x804\xc0G8\x02H\xd3\x07\x00\x06\x00%\x01E\xffF\x11"\x00\xdb\xff\x1f\x00\x8e\xff=\xff\xa2\x00\x806\xc0Gj\x02\xf0Y\t\x00\x07\x00\'\x01F\xff7\x11"\x00\xdc\xff \x00\x92\xff>\xff\xa2\x00\x808\xc0G\x0e\x02\x98\xdc\n\x00\x08\x008\x01X\xff<\x11!\x00\xdb\xff\x1f\x00\x8f\xff;\xff\xa3\x00\x806\xc0G\xc9\x02@c\x0c\x00\t\x00\x16\x01P\xff6\x11"\x00\xdb\xff\x1f\x00\x93\xff<\xff\x9f\x00\x002\xc0G%\x02\xe8\xe9\r\x00\n\x00"\x01:\xffP\x11"\x00\xdb\xff \x00\x90\xff<\xff\xa2\x00\x002\xc0G<\x02\x90l\x0f\x00\x0b\x002\x01L\xff=\x11"\x00\xdb\xff \x00\x8f\xff?\xff\xa0\x00\x003\xc0G\xd6\x028\xf3\x10\x00\x0c\x00\'\x01J\xffK\x11"\x00\xdc\xff\x1f\x00\x91\xff:\xff\xa0\x00\x003\xc0G\xbf\x02\xe0y\x12\x00\r\x00#\x01O\xff>\x11"\x00\xdb\xff\x1f\x00\x91\xff:\xff\xa4\x00\x003\xc0G\x99\x02\x88\xfc\x13\x00\x0e\x005\x01N\xff^\x11#\x00\xdb\xff \x00\x8f\xff@\xff\x9f\x00\x003\xc0G`\x020\x83\x15\x00\x0f\x00\x1f\x01L\xff7\x11"\x00\xdc\xff\x1f\x00\x90\xff<\xff\xa1\x00\x803\xc0G\x05\x02\xd8\t\x17\x00\x10\x003\x01^\xffU\x11"\x00\xdb\xff\x1f\x00\x91\xff>\xff\xa0\x00\x805\xc0G%\x02\x80\x8c\x18\x00\x11\x00\x1b\x01F\xffB\x11"\x00\xdc\xff \x00\x92\xff@\xff\xa2\x00\x807\xc0G\x94\x02(\x13\x1a\x00\x12\x001\x01J\xffM\x11"\x00\xdb\xff\x1f\x00\x94\xff>\xff\xa2\x00\x006\xc0GJ\x02\xd0\x99\x1b\x00\x13\x00@\x01A\xff=\x11"\x00\xdb\xff \x00\x91\xff=\xff\xa0\x00\x802\xc0G\x8d\x02x\x1c\x1d\x00\x14\x00+\x01?\xffH\x11"\x00\xdb\xff \x00\x90\xff>\xff\xa0\x00\x802\xc0G\xc3\x02 \xa3\x1e\x00\x15\x00!\x01O\xffB\x11"\x00\xdb\xff \x00\x92\xff=\xff\xa3\x00\x804\xc0GR\x02\xc8) \x00\x16\x00(\x01]\xff8\x11#\x00\xdb\xff\x1f\x00\x8f\xff>\xff\xa1\x00\x804\xc0GN\x02p\xac!\x00\x17\x00*\x01D\xffO\x11"\x00\xdb\xff \x00\x91\xff>\xff\xa1\x00\x001\xc0G\xba\x02\x183#\x00\x18\x00\'\x01C\xffI\x11"\x00\xdb\xff\x1f\x00\x8f\xff?\xff\xa3\x00\x001\xc0Gn\x02\xc0\xb9$\x00\x19\x00/\x01>\xff6\x11"\x00\xdb\xff\x1f\x00\x90\xff;\xff\xa2\x00\x805\xc0G\xae\x02h<&\x00\x1a\x000\x01L\xffB\x11"\x00\xdb\xff\x1f\x00\x90\xff=\xff\xa1\x00\x805\xc0G\x9e\x02\x10\xc3\'\x00\x1b\x00\x1c\x019\xffD\x11!\x00\xdb\xff \x00\x92\xff=\xff\xa2\x00\x804\xc0Gz\x02\xb8I)\x00\x1c\x00\x1f\x01Q\xffB\x11"\x00\xdb\xff\x1f\x00\x90\xff=\xff\xa2\x00\x806\xc0G\x00\x02`\xcc*\x00\x1d\x00%\x01@\xffE\x11"\x00\xdc\xff\x1f\x00\x93\xff:\xff\xa1\x00\x804\xc0Gq\x02\x08S,\x00\x1e\x00\x1e\x01P\xff:\x11#\x00\xdb\xff\x1f\x00\x91\xff;\xff\xa0\x00\x804\xc0G\xd3\x02\xb0\xd9-\x00\x1f\x00\x1c\x01G\xffI\x11#\x00\xdb\xff\x1f\x00\x91\xff>\xff\xa3\x00\x008\xc0G\r\x02X\\/\x00 \x00\x14\x01A\xffI\x11"\x00\xdb\xff\x1f\x00\x90\xff<\xff\xa3\x00\x006\xc0G_\x02\x00\xe30\x00!\x00$\x01N\xff=\x11"\x00\xdb\xff \x00\x92\xff>\xff\xa1\x00\x003\xc0G\xd5\x02\xa8i2\x00"\x00 \x01B\xff;\x11!\x00\xdb\xff \x00\x90\xff?\xff\xa2\x00\x005\xc0G\xfd\x02P\xec3\x00#\x00\'\x01>\xffM\x11"\x00\xdc\xff\x1f\x00\x8f\xff;\xff\xa4\x00\x806\xc0G(\x02\xf8r5\x00$\x000\x01g\xffP\x11"\x00\xdb\xff\x1f\x00\x91\xff<\xff\xa1\x00\x804\xc0GU\x02\xa0\xf96\x00%\x00)\x01A\xffL\x11"\x00\xdb\xff\x1f\x00\x90\xff>\xff\xa0\x00\x804\xc0G\xa5\x02H|8\x00&\x00\x16\x01<\xff?\x11"\x00\xdb\xff \x00\x90\xff>\xff\xa0\x00\x804\xc0G\xcb\x02\xf0\x02:\x00\'\x00+\x01H\xff8\x11"\x00\xdb\xff \x00\x90\xff<\xff\xa3\x00\x003\xc0G\xc6\x02\x98\x89;\x00(\x00%\x01U\xffH\x11"\x00\xdb\xff\x1f\x00\x8f\xff=\xff\xa2\x00\x80/\xc0G\xf4\x02@\x0c=\x00)\x00\x1d\x01>\xffD\x11!\x00\xdb\xff\x1f\x00\x8e\xff?\xff\xa0\x00\x00/\xc0Gs\x02\xe8\x92>\x00*\x00\x1c\x01C\xff<\x11"\x00\xdb\xff \x00\x92\xff;\xff\xa4\x00\x802\xc0G\xfc\x02\x90\x19@\x00+\x00 \x01F\xffH\x11!\x00\xda\xff \x00\x90\xff=\xff\xa1\x00\x801\xc0G=\x028\x9cA\x00,\x00#\x019\xffE\x11!\x00\xdb\xff \x00\x91\xff=\xff\x9f\x00\x801\xc0GY\x02\xe0"C\x00-\x00#\x01?\xff2\x11"\x00\xdb\xff\x1f\x00\x92\xff=\xff\xa2\x00\x802\xc0GL'

br = BinaryRecord([0x12, 0x34], binary_fields, [BinaryFieldType("float", 4, "f", '%.6f')])
by = open(sys.argv[1], 'rb').read()
recs = br.decode(by)

print("# timing variance:", numpy.var(numpy.diff(numpy.array([r.currentTime for r in recs]))))
print("#", br.status())
print('\n'.join(map(br.to_string, recs)))